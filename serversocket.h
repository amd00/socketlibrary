
#ifndef _SERVERSOCKET_H_
#define _SERVERSOCKET_H_

#include <signal.h>

#include "socket.h"


////////////////////////////////////////////////////////////////////////////////////

//! \brief Абстрактный класс, предоставляющий интерфейс для создания серверного сокета.
/*! Класс предоставляет возможность создавать серверные сокеты. Существует возможность
	обрабатывать входящие подключения и данные тремя способами. Первый спсоб - это
	запуск сервера, блокирующего управление (синхронная обработка событий). 
	При этом входящие данные обрабатываются	в порядке поступления. Второй способ - запуск
	сервера с асинхронной обработкой событий. При этом управление не блокируется
*/
class ServerSocket
{
private:
	//! \brief Вспомогательный класс, реализующий список подключённых сокетов.
	/*! Класс реализует список объектов класса \e Socket, подключённых к 
		данному объекту \e ServerSocket.
	*/
	class SocketList
	{
		//! \brief Структура, представляющая элемент списка сокетов.
		/*! Представляет элемент списка объектов класса \e Socket.
		*/
		struct SocketListItem
		{
			//! Сокет.
			/*! Указатель на объект класса \e Socket.
			*/
			Socket *sock;
			//! Следующий элемент.
			/*! Указатель на следующий элемент списка сокетов.
			*/
			SocketListItem *next;
		};
		//! Первый элемент списка.
		/*! Указатель на первый элемент списка подключённых сокетов.
		*/
		SocketListItem *first;
		//! Размер списка.
		/*! Размер списка подключённых сокетов.
		*/
		size_t size;
	public:
		//! Конструктор.
		SocketList();
		//! Деструктор.
		~SocketList();
		//! Добавление элемента.
		/*! Добавление новего элемента к списку.
		
			\param s - указатель на объект класса \e Socket.
		
			\return \b true - в случае успеха, \b false - иначе.
		*/
		bool AddItem(Socket *s);
		//! Удаление элемента.
		/*! Удаление элемента из списка.
		
			\param s - указатель на объект класса \e Socket, который необходимо удалить
			из списка.
		
			\return \b true - в случае успеха, \b false - иначе.
		 */
		bool RemoveItem(Socket *s);
		//! Наличие элемента.
		/*! Проверяет наличие элемента \e s в списке.
		
			\param s - указатель на объект класса \e Socket.
		
			\return \b true - если элемент найден, \b false - иначе.
		*/
		bool Exists(Socket *s);
		//! Размер.
		/*! Размер списка сокетов.
		
			\return размер списка \e size.
		*/
		size_t Size() const;
		
		//! Элемент списка по индексу.
		/*! Поиск элемента списка по порядковому номеру.
		
			\param i - индекс элемента.
			
			\return указатель на объект класса \e Socket. Если \e i выходит за границы
			списка, возвращается \b NULL.
		*/
		Socket *operator[](int i) const;
		
		//! Элемент списка по файловому дескриптору.
		/*! Поиск элемента списка по файловому дескриптору.
			
			\param fd - файловый дескриптор.
		
			\return указатель на объект класса \e Socket. Если объект не найден, 
			возвращается \b NULL.
		*/
		Socket *GetSocketByFd(int fd) const;
	};
	
	//! \brief Список серверных сокетов.
	/*! Класс, реализующий список объектов класса \e ServerSocket. Необходим для создания
		нескольких серверов внутри одного приложения. 
	*/
	class ServerSocketList
	{
		
		//! \brief Структура, представляющая элемент списка серверных сокетов.
		/*! Представляет элемент списка объектов класса \e ServerSocket.
		 */
		struct ServerSocketListItem
		{
			
			//! Сервеный сокет.
			/*! Указатель на объект класса \e ServerSocket.
			*/
			ServerSocket *sock;
			
			//! Следующий элемент списка.
			/*! Указатель на следующий элемент списка серверных сокетов.
			*/
			ServerSocketListItem *next;
		};
		
		//! Первый элемент списка.
		/*! Указатель на первый элемент списка серверных сокетов.
		*/
		ServerSocketListItem *first;
		
		//! Размер списка.
		/*! Количество элементов в списке. 
		*/
		size_t size;
	public:
		
		//! Конструктор.
		ServerSocketList();
		
		//! Деструктор.
		~ServerSocketList();
		
		//! Добавляет элемент к списку.
		/*! Добавляет новый элемент к списку серверных сокетов.
			
			\param s - добавляемый элемент класса \e ServerSocket.
		
			\return \b true - в случае успешного выполнения операции, \b false - иначе.
		*/
		bool AddItem(ServerSocket *s);
		
		//! Удаляет элемент из списка.
		/*! Удаляет элемент из списка серверных сокетов.
			
			\param s - удаляемый элемент класса \e ServerSocket.
		 */
		void RemoveItem(ServerSocket *s);
		
		//! Размер списка.
		/*! Размер списка серверных сокетов.
		
			\return размер списка \e size.
		*/
		size_t Size() const;
		
		//! Элемент списка по индексу.
		/*! Поиск элемента списка по порядковому номеру.
		
			\param i - индекс элемента.
			
			\return указатель на объект класса \e ServerSocket. Если \e i выходит за границы
			списка, возвращается \b NULL.
		*/
		ServerSocket *operator[](int i) const;
		
		//! Элемент списка по файловому дескриптору.
		/*! Поиск элемента списка по файловому дескриптору.
			
			\param fd - файловый дескриптор.
			
			\return указатель на объект класса \e ServerSocket. Если объект не найден, 
			возвращается \b NULL.
		*/
		ServerSocket *GetServerByFd(int fd) const;
		//! Элемент списка по файловому дескриптору.
		/*! Поиск элемента списка по файловому дескриптору подключённого к нему сокета.
			
			\param sfd - файловый дескриптор подключённого сокета.
				
			\return указатель на объект класса \e ServerSocket. Если объект не найден, 
			возвращается \b NULL.
		*/
		ServerSocket *GetServerBySocketFd(int sfd) const;
	};
	friend class ServerSocket::ServerSocketList;
	
	//! Мьютекс.
	/*! Используется для блокировки потоков в многопоточном сервере.
	*/
	static pthread_mutex_t mutex;
	
	//! Список подключённых сокетов.
	/*! Указатель на объект класса \e SocketList. Представляет собой список
		подключённых сокетов.
	*/
	SocketList *sockets;
	
	//! Массив структур \e pollfd.
	/*! Используется при отправке, приёме и ожидании данных в качетве аргумента
		функции \e poll;
	*/
	pollfd polls[SOMAXCONN+1];
	
	//! Обработка новых подключений.
	/*! Метод для обработки новых подключений к серверу. Используется в случае,
		если сервер был запущен в асинхронном режиме. Представляет собой обработчик
		сигнала \b SIGRTMIN+5.
	
		\param s - номер полученного сигнала ( \b SIGRTMIN+5 ).
		\param si - указатель на структуру \e siginfo_t.
	*/
	static void AsyncAccept(int s, siginfo_t *si, void*);
	
	//! Обработка входящих данных.
	/*! Метод для обработки входящих данных. Используется в случае,
		если сервер был запущен в асинхронном режиме. Представляет собой обработчик
		сигнала \b SIGRTMIN+6.
		
		\param s - номер полученного сигнала ( \b SIGRTMIN+6 ).
		\param si - указатель на структуру \e siginfo_t.
	*/
	static void AsyncReceiver(int s, siginfo_t *si, void*);
	
	//! Обработка новых подключений.
	/*! Метод для обработки новых подключений к серверу. Используется в случае,
		если сервер был запущен в многопоточном режиме.
		
		\param data - файловый дескриптор слушающего сокета.
	*/
	static void *ThreadAccept(void *data);
	
	//! Обработка входящих данных.
	/*! Метод для обработки входящих данных. Используется в случае,
		если сервер был запущен в многопоточном режиме.
			
		\param data - указатель на объект класса \e Socket, на который пришли данные.
	*/
	static void *ThreadReceiver(void *data);
	
	//! Список серверов.
	/*! Указатель на объект класса \e ServerSocketList. Представляет собой список
		серверных сокетов.
	*/
	static ServerSocketList *servers;
protected:
	//! Тип обработки данных.
	enum Type
	{
		Sync, /*!< синхронный*/ 
		Async, /*!< асинхронный*/
		Thread /*!< многопоточный*/
	};
	//! Слушающий сокет.
	/*! Файловый дескриптор, принимающий подключения.
	*/
	int listener;
	//! Адресная структура.
	/*! Адресная структура сокета \e listener.
	*/
	sockaddr addr;
	//! Тип сервера.
	Type srv_type;
	//! Метод для обработки подключений.
	/*! Метод вызывается при попытке подключения к серверу.
	
		\param sock - новый подключённый сокет.
	 */
	virtual void Accept(Socket *sock) = 0;
	//! Метод для обработки входящих данных.
	/*! Метод вызывается при наличии в сокете входящих данных.
	
		\param sock - сокет, в который пришли данные.
	 */
	virtual void Receiver(Socket *sock) = 0;
	//! Создание объекта \e Socket.
	/*! Создаёт объект класса \e Socket по файловому дескриптору, полученному
		из функции \e accept. Метод реализован в классах-наследниках.
	
		\param fd - файловый дескриптор.
	
		\return Указатель на новый объект класса \e Socket.
	
		\sa TcpServerSocket UnixServerSocket
	 */
	virtual Socket *GetNewSocket(int fd) = 0;
	//! Отключение клиента.
	/*! Метод должен вызываться для отключения клиента. При этом \e sock удаляется из
		списка подключённых клиентов, и освобождается занятая им память.
		Пример:\n
		DisconnectClient(sock);\n
		delete sock;\n
		При выполнении данного кода будет ошибка сегментации.
	
		\param sock - отключаемый клиент.
	 */
	virtual void DisconnectClient(Socket *sock);
public:
	//! Конструктор.
	ServerSocket();
	//! Деструктор.
	virtual ~ServerSocket();
	//! Запуск сервера.
	/*! Запуск сервера с синхронной обработкой подключений и приёма входящих данных.
		После вызова этого метода управление приложением блокируется.
	 */
	void Start();
	//! Запуск сервера.
	/*! Запуск сервера с асинхронной обработкой подключений и приёма входящих данных.
		Для реализации асинхронного ввода-вывода используются сигналы \b SIGRTMIN+5 и
		\b SIGRTMIN+6
	 */
	void AsyncStart();
	//! Запуск сервера.
	/*! Запуск сервера с многопоточной обработкой подключений и приёма входящих данных.
		После вызова этого метода создаётся поток, в котором ожидаются подключения.
		Так же создаётся новый поток для взаимодействия с каждым новым клиентом.
	 */
	void ThreadStart();
};



// Для реализации асинхронного ввода-вывода используются сигналы SIGRTMIN + 5 и SIGRTMIN + 6

////////////////////////////////////////////////////////////////////////////////////

#endif
